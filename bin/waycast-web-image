#!/usr/bin/env --split-string=${JDK_HOME}/bin/java @wayic/Web/imager/java_arguments \c [SS]
package wayic.Web.imager; // [AFN]

// This command runs directly from the present source file, it needs no compiling.

import Breccia.parser.BrecciaCursor;
import Breccia.parser.BrecciaXCursor;
import Breccia.Web.imager.*;
import java.io.IOException;
import java.nio.file.Path;
import Java.Unhandled;
import wayic.Waybrec.parser.WaybrecCursor;
import wayic.Waybrec.parser.WaybrecXCursor;

import static Java.Files.emptyDirectory;
import static java.nio.file.Files.createDirectories;
import static wayic.Web.imager.Project.outDirectory;


/** A shell command to make a Web image.
  *
  *     @see <a href='http://reluk.ca/project/wayic/Web/imager/bin/waycast-web-image.brec'>
  *       The `waycast-web-image` command</a>
  */
public final class WaycastWebImageCommand { // [AFN]


    private WaycastWebImageCommand( final Path boundaryPath ) { this.boundaryPath = boundaryPath; }



    /** Takes a `waycast-web-image` command from the shell and executes it.
      */
    public static void main( final String[] arguments ) {
        final boolean hasFailed;
        final String argument;
        if( arguments.length == 1
         && !(argument = arguments[0]).startsWith( "-" )) { // Allowing e.g. for a deliberate `-?`.
            final var command = new WaycastWebImageCommand( Path.of( argument ));
            hasFailed = !command.run(); }
        else {
            System.err.println( "Usage: waycast-web-image <boundary path>" );
            hasFailed = true; }
        if( hasFailed ) System.exit( 1 ); }



////  P r i v a t e  ////////////////////////////////////////////////////////////////////////////////////


    private final Path boundaryPath;



    /** @return True on success, false on failure.
      */
    private boolean run() {
        final BrecciaHTMLTransformer tB =
          new BrecciaHTMLTransformer( new BrecciaXCursor( new BrecciaCursor() ));
        final WaybrecHTMLTransformer t =
          new WaybrecHTMLTransformer( new WaybrecXCursor( new WaybrecCursor() ), tB );
        final Path out;
        try { out = emptyDirectory( createDirectories( outDirectory.resolve( Path.of( "mould" )))); }
        catch( IOException x ) { throw new Unhandled( x ); } // Unexpected for `outDirectory`.
        return Imaging.image( "waycast-web-image", boundaryPath, t, out ); }}



// NOTES
// ─────
//   AFN  Atypical file naming is allowed here.  ‘The compiler does not enforce the optional restriction
//        defined at the end of JLS §7.6, that a type in a named package should exist in a file whose
//        name is composed from the type name followed by the .java extension.’
//        http://openjdk.java.net/jeps/330
//        https://docs.oracle.com/javase/specs/jls/se15/html/jls-7.html#jls-7.6
//
//   SS · Here the long form `--split-string` (as opposed to `-S`) enables Emacs to recognize this file
//        as Java source code.  See the note apropos of ‘source-launch files encoded with a shebang’ at
//        `http://reluk.ca/project/Java/Emacs/jmt-mode.el`.



                                                   // Copyright © 2020-2021  Michael Allan.  Licence MIT.
